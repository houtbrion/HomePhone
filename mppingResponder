#!/usr/bin/python
# -*- coding: utf-8 -*-

# 各種モジュールのインポート
#import pyping
import netifaces
from subprocess import Popen, STDOUT
import RPi.GPIO as GPIO
import time
import os
import sys
import signal
from contextlib import closing
import socket


try:
    from subprocess import DEVNULL # py3k
except ImportError:
    import os
    DEVNULL = open(os.devnull, 'wb')

# デバッグ用モジュールのインポート
from logging import getLogger, StreamHandler, NullHandler, DEBUG


# グローバル変数の定義
DEVNAME='eth'
INTERVAL=10
MULTICAST = '239.255.0.1' # マルチキャストアドレス
PORT = 12345
BUFF_SIZE = 512


# daemon化するか否か
#DAEMON=False
DAEMON=True
PID_FILE='/var/run/mppingResponder.pid'

# 動作モード
DEBUG_FLAG=False
#DEBUG_FLAG=True


# IPアドレスのリストの取得
# 出力例 : [{'addr': '127.0.0.1', 'netmask': '255.0.0.0', 'peer': '127.0.0.1'}]
def getIpAddress():
    global logger
    logger.debug("get ip address")
    ipList=[]
    for iface_name in netifaces.interfaces():
        iface_data = netifaces.ifaddresses(iface_name).get(netifaces.AF_INET)
        if iface_data!=None:
            iface_data[0]['dev'] = iface_name
            ipList.extend(iface_data)
    logger.debug(ipList)
    return ipList

# IPアドレスのリストをフィルタして，特定のデバイスのアドレスを取り出す
# 出力例 : '127.0.0.1'
def deviceFilter(ipList,filterString):
    for addressInfo in ipList:
        dev=addressInfo['dev']
        if filterString in dev:
            return addressInfo['addr']
    return ''

# 全体の設定
# 
def setup(debugFlag):
    global logger
    signal.signal(signal.SIGTERM, receiveSignal)
    #signal.signal(signal.SIGKILL, receiveSignal)
    logger = getLogger(__name__)
    if debugFlag:
        handler = StreamHandler()
        handler.setLevel(DEBUG)
        logger.setLevel(DEBUG)
    else:
        handler = NullHandler()
    logger.addHandler(handler)

# ループ
# ネットワークのIPアドレスがなければ警告を出す．
def loop(interval,devName,maddr,port,bufsize):
    global logger
    #global sock
    logger.debug("loop Top, devname = {name}".format(name=devName))
    with closing(socket.socket(socket.AF_INET, socket.SOCK_DGRAM)) as sock:
        logger.debug("success to open socket")
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind(('', port))
        #sock.settimeout(interval)
        localAddr=""
        while True:
            ipList=getIpAddress()
            newAddr=deviceFilter(ipList,devName)
            logger.debug("newAddr = {addr}".format(addr=newAddr))
            if newAddr=="":
                time.sleep(interval)
            else:
                logger.debug("network is active")
                if ((newAddr != localAddr) or (localAddr=='')):
                    logger.debug("network address is changed")
                    localAddr=newAddr
                    sock.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, socket.inet_aton(maddr) + socket.inet_aton(localAddr))
                logger.debug("try to receive packet")
                try:
                    sock.settimeout(interval)
                    data, addr = sock.recvfrom(bufsize)
                    logger.debug("packet received")
                    logger.debug("packet received : addr = {addr} , port = {port} , data = {data}".format(addr=addr[0],port=addr[1],data=data))
                    if addr[1] != port:
                        logger.debug("send packet")
                        sock.sendto('myHostName',(addr[0],addr[1]))
                except socket.timeout:
                    logger.debug("no packet received")
                    #time.sleep(0.1)

# daemon化
#
def fork(flag,pidFile,interval,devName,addr,port,bufsize):
    pid = os.fork()
    if pid > 0:
        f = open(pidFile,'w')
        f.write(str(pid)+"\n")
        f.close()
        sys.exit()
    if pid == 0:
        setup(flag)
        loop(interval,devName,addr,port,bufsize)

# 終了処理
#   なにかのエラーで終了する場合は，PIDファイルを消去
def finish(pidFile):
    # ファイルを消す
    if os.path.exists(pidFile):
        os.remove(pidFile)
    sys.exit()

# シグナルを受けた場合の処理
#
def receiveSignal(num,stack):
    global PID_FILE
    finish(PID_FILE)
    
#
# メイン
#
if __name__ == '__main__':
    if DAEMON:
        try:
            fork(DEBUG_FLAG,PID_FILE,INTERVAL,DEVNAME,MULTICAST,PORT,BUFF_SIZE)
        except:
            sys.exit()
    else:
        setup(DEBUG_FLAG)
        logger.debug("setup done")
        try:
            loop(INTERVAL,DEVNAME,MULTICAST,PORT,BUFF_SIZE)
        except:
            finish(PID_FILE)
